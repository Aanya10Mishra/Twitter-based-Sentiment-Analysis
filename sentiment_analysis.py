# -*- coding: utf-8 -*-
"""Twitter Sentiment Analysis using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z91ME2tLtp3Y5vnp8k0_9e5V_9dnKWhY
"""

pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d kazanova/sentiment140

# extracting the compressed dataset
# zipfile is the function
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Importing the Dependencies"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer # used for the stemming of words
from sklearn.feature_extraction.text import TfidfVectorizer # as the textual data cannot be directly fed to a machine model  , it has to be converted to numerical data first.
from sklearn.model_selection import train_test_split # to use the test and train data
from sklearn.linear_model import LogisticRegression # training the data using  logistic regression
from sklearn.metrics import accuracy_score # to find the accuracy score
#import string

import nltk
nltk.download('stopwords')

#printing the stopwords in English
print(stopwords.words('english'))

"""Data Preprocessing"""

# loading the data from csv file to pandas dataframe
twitter_dataset = pd.read_csv('/content/training.1600000.processed.noemoticon.csv', encoding = 'ISO-8859-1')

# checking the number of rows and columns
twitter_dataset.shape

# printing the first five rows of the dataframe
twitter_dataset.head()

# naming the columns and reading the dataset again

columns_names = ["target", "ids", "date", "flag", "user", "text"]
twitter_dataset = pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names = columns_names, encoding = 'ISO-8859-1')

# checking the number of rows and columns
twitter_dataset.shape

twitter_dataset.head()

# counting the number of missing values in the dataset
twitter_dataset.isnull().sum()

# checking the distribution of target column
twitter_dataset['target'].value_counts()

"""Convert the target "4" to "1"
"""

twitter_dataset.replace({'target':{4:1}}, inplace=True)

# checking the distribution of target column
twitter_dataset['target'].value_counts()

"""0 ---- Negative Tweet

1 ---- Positive Tweet

**Stemming**

Stemming is the process of reducing a word to its Root word.

example : actor,actress,acting = act
"""

port_stem = PorterStemmer()

def stemming(content):

  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)

  return stemmed_content

twitter_dataset['stemmed_content'] = twitter_dataset['text'].apply(stemming)
#50 minutes to complete

twitter_dataset.head()

print(twitter_dataset['stemmed_content'])

print(twitter_dataset['target'])

# separating the data and label
X = twitter_dataset['stemmed_content'].values
Y = twitter_dataset['target'].values

print(X)

print(Y)

"""Splitting the data to Training data and Test data"""

X_train, X_test , Y_train , Y_test = train_test_split(X,Y,test_size = 0.2, stratify = Y, random_state =2)

print(X.shape, X_train.shape ,X_test.shape)

print(X_train)

print(X_test)

# converting the textual data to numerical data

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training the ML Method"""

# Logistic Regression

model = LogisticRegression(max_iter=1000)

model.fit(X_train,Y_train)

"""Model Evaluation"""

# Accuracy Score on the training data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print('Accuracy Score on the training data : ',training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print('Accuracy Score on the training data : ',test_data_accuracy)

"""saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model, open(filename,'wb'))

"""using the saved model for future predictions"""

#loading the saved model
loaded_model = pickle.load(open('/content/trained_model.sav','rb'))

X_new = X_test[200]
print(Y_test[200])

predictions = model.predict(X_new)
print(predictions)

if(predictions[0] == 0):
  print('The tweet is negative')
else:
  print('The tweet is positive')
